================================================================================

			TRACE2MODEL FEATURE MATRIX

================================================================================

GET THE STUFF
-------------

The feature matrix is built on top of SQLite interface. SQLite and Orable BDB
provide this interface and can both be used as a back-end. One can link the
code against one of these libraries. Notice that SQLlite header file
(sqlite3.h) is required even if you plan to use to BDB, because BDB does not
provide a corresponding header file. So, whichever back-end you plan to use,
first download SQLite tarball and compile it:

http://www.sqlite.org/download.html

If you want to use BDB, download BDB tarball:

http://www.oracle.com/technetwork/database/berkeleydb/downloads/index.html

Configure and build SQLite and BDB. It's easy. And just in case things go
wrong, you can find detailed documentation within the source tarball and on the
internet. Use flags --enable-sql when building BDB.  This ensures that sqlite
wrappers to BDB are built.

The code was tested for sqlite-autoconf-3071300 and db-5.3.21.


BUILD TRACE2MODEL CODE
----------------------

Adjust SQLITE_INCLUDE_DIR, SQLITE_LIB_DIR, BDB_INCLUDE_DIR, and BDB_LIB_DIR
variables in the Makefile to point to appropriate directories. Set WITHBDB to 1
if you want the code to be linked against BDB.


PLAY WITH THE CODE
------------------

File fun_with_sqlite.c contains some really simple code that creates a table,
loads trace data into the file and the performs some simple iterations over
inserted data. It uses trace as an input trace in SPC format
(http://skuld.cs.umass.edu/traces/storage/SPC-Traces.pdf).
trace-example/Financial1-snippet.spc is a snippet of one of the trace to test
fun_with_sqlite.

load_client_1 and iterate_client_1 are sample code that show the usage of the
feature matrix to load and iterate data. Both clients operate on SPC traces.
See the code for more documentation.


RUNNING THE EXAMPLES
--------------------

~/workspace/bdb/src $ ./load_client_1 
Usage   : ./load_client_1 <UMASS oltp trace filename> <backing store uri> <matrix name>
Example : ./load_client_1 ~/traces/spctrace.txt file:///home/data/spctrace.data fin1

The URI feature does not work as yet due to a suspected sqlite bug. Use the
file path directly instead of a URI. An example follows:

~/workspace/bdb/src $ ./load_client_1 ~/traces/fin1_1m.spc ../data/bdb.1 fin1_1m

~/workspace/bdb/src $ ./iterate_client_1 
Usage   : ./iterate_client_1 <backing store uri> <matrix name>
Example : ./iterate_client_1 file:///traces/ fin1~/workspace/bdb/src

Example:
~/workspace/bdb/src $ ./iterate_client_1 ../data/bdb.1 fin1_1m
