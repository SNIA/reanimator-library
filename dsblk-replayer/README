USAGE

dsblkreplay <-sync|-async> <device_id> <config_file> <dataseries_file> ...

OVERVIEW

dsblkreplay replays block I/O trace stored in a DataSeries file.
It can be run in sync or async modes:

In sync mode, the replayer waits until the device finishes for each operation.
It uses read() and write() system calls. The replayer will skip operation
requests that are supposed to be issued during other I/O operation executions.

In async mode, the replayer queues each I/O operation and resumes back
immediately.  It uses aio_read() and aio_write(). The replayer is less likely to
miss operation requests since it takes comparatively small time to execute each
operation.

<device_id> is a a block device (e.g., /dev/sdb) which should be stressed by the
replayer.

Replay configuration file specifies how to transform request parameters before
sending them to the disk.

TRACE FILE FORMAT

The trace file should be stored in a DataSeries file with Extents (tables) that
has the ExtentType called "read_write" with the following fields:

1) process_id (Int32Field) - process ID
2) offset (Int64Field) - block offset number (512 bytes per block)
3) request_size (Int64Field) - I/O size in bytes
4) operation (ByteField) - operation type: 0 for read and 1 for write
5) enter_time (Int64Field) - timestamp in Tfracs.

CONFIGURATION FILE FORMAT

Each line in the configuration file specifies how to transform one parameter.
Within each line, there are five comma-separated fields:

1) parameter name
2) real_min
3) real_max
4) projected_min
5) projected_max

While replaying the trace, dsblkreplay does NOT replay any operation if any of
its parameters exceeds specified real range (from real_min to real_max). If all
parameters are in the real range, then the parameter values will be projected
linearly from the real range to the projected range (from projected_min to
projected_max).

With this transformation of ranges, we can do any of the following:
1) truncate a parameter (replay only if parameter fits within the real range)
2) scale a parameter linearly
3) translate a parameter (project one range to the other linearly)

EXAMPLE

The following example demonstrates the flexibility of the replayer.
Let's assume that in some trace:

1) process_id ranges from 0 to 23 (i.e., 24 apps)
2) offset ranges from 0 to 2097151 (1GB size device)
3) request size ranges from 1 to 1048576 (up to 1MB)
4) operation ranges from 0 to 1 (read an write)
5) enter_time ranges from 0 to 3600000000000 (1 hour)

In the configuration file we want to specify that:

1) Only requests from the processes with process_id less
   than 9 should be replayed
2) offsets are translated 1024 blocks up
3) request_size is cut in half
4) issue all (even write) requests as read requests
5) play only first 16 seconds and do it twice faster

Then, config file would look like:

$ cat dsblkreplay.config
process_id,0,9,0,9
offset,0,2097151,1024,2097151
request_size,1,1048576,1,524288
operation,0,1,0,0
enter_time,0,16000000000,0,8000000000

And the invocation line is:

% dsblkreplay -async /dev/sdb1 dsblkreplay.config dsblkreplay.ds
